generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// generator DataGenerator {
//   provider = "prisma-generator-fake-data"
//   output   = "../types/fake-data.ts"
// }

model Student {
  id           Int                 @id @default(autoincrement())
  name         String
  email        String              @unique
  password     String
  phone        String              @unique
  address      String
  image        String?
  document     String?
  majorId      Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  applications Application[]
  major        Major               @relation(fields: [majorId], references: [id], onDelete: NoAction)
  internships  StudentInternship[]

  Feedback Feedback[] @relation(map: "Feedback_student_userId_fkey")
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  phone       String       @unique
  weburl      String
  address     String
  image       String?
  isApproved  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  internships Internship[]
  mentors     Mentor[]
  posts       Post[]

  Feedback Feedback[] @relation(map: "Feedback_company_userId_fkey")
}

model Application {
  id           Int               @id @default(autoincrement())
  studentId    Int
  internshipId Int
  status       ApplicationStatus @default(PENDING)
  appliedAt    DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  internship   Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  student      Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, internshipId])
}

model Major {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  students    Student[]
  Requirement Requirement[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  image     String?
  email     String   @unique
  phone     String   @unique
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: NoAction)

  // Feedback Feedback[] @relation(map: "Feedback_employee_userId_fkey")
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String
  content      String
  image        String
  companyId    Int
  internshipId Int
  views        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@unique([internshipId, companyId])
  @@index([companyId])
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employee  Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Internship {
  id                Int                 @id @default(autoincrement())
  title             String
  type              InternshipType
  companyId         Int
  salary            Boolean
  createdAt         DateTime            @default(now())
  enrollmentEndDate DateTime
  startDate         DateTime
  endDate           DateTime
  updatedAt         DateTime            @default(now()) @updatedAt
  applications      Application[]
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  posts             Post[]
  students          StudentInternship[]
  Requirement       Requirement[]

  @@index([companyId])
}

model Requirement {
  id           Int        @id @default(autoincrement())
  internshipId Int
  majorId      Int
  studentLimit Int
  approvedApps Int[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  major        Major      @relation(fields: [majorId], references: [id], onDelete: Cascade)

  @@unique([majorId, internshipId])
  @@index([internshipId])
}

model StudentInternship {
  id           Int              @id @default(autoincrement())
  studentId    Int
  internshipId Int
  mentorId     Int?
  image        String?
  type         InternshipType
  status       InternshipStatus
  internship   Internship       @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  mentor       Mentor?          @relation(fields: [mentorId], references: [id])
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  Feedback     Feedback[]

  @@unique([studentId, internshipId])
  @@index([internshipId, studentId])
}

model Feedback {
  id                Int               @id @default(autoincrement())
  userId            Int
  content           String
  score             Int               @default(0)
  internshipId      Int
  account           AccountType
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  studentinternship StudentInternship @relation(fields: [internshipId], references: [id])
  student           Student?          @relation(fields: [userId], references: [id], map: "Feedback_student_userId_fkey")
  // employee  Employee?   @relation(fields: [userId], references: [id], map: "Feedback_employee_userId_fkey")
  company           Company?          @relation(fields: [userId], references: [id], map: "Feedback_company_userId_fkey")
}

model Mentor {
  id          Int                 @id @default(autoincrement())
  name        String
  image       String?
  position    String
  password    String
  email       String              @unique
  phone       String              @unique
  companyId   Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  internships StudentInternship[]

  @@index([companyId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  STARTED
  REJECTED
}

enum InternshipType {
  INTRODUCTION
  PROFESSIONAL
  VOLUNTEER
  PART_TIME
  ABCC
}

enum InternshipStatus {
  PENDING
  STARTED
  FINISHED
  CANCELLED
}

enum AccountType {
  student
  employee
  company
}
