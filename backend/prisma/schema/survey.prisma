// Survey model has many questions
model Survey {
  id        Int          @id @default(autoincrement())
  title     String
  creatorId Int
  visible   Boolean      @default(false)
  questions Question[]
  status    SurveyStatus @default(active)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  creator   Employee   @relation(fields: [creatorId], references: [id])
  responses Response[]
}

// Question model belongs to a single survey but can have many answers
model Question {
  id        Int      @id @default(autoincrement())
  question  String
  answers   Answer[]
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  survey    Survey   @relation(fields: [surveyId], references: [id])
  surveyId  Int

  @@unique([order, surveyId])
}

// Answer model belongs to a single question and a single response
model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  responseId Int
  value      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
  response Response @relation(fields: [responseId], references: [id])

  @@unique([responseId, questionId])
}

// Response model belongs to a single survey and a single user
model Response {
  id        Int      @id @default(autoincrement())
  surveyId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]

  survey  Survey   @relation(fields: [surveyId], references: [id])
  student Student? @relation(fields: [userId], references: [id], map: "Feedback_student_userId_fkey")
  company Company? @relation(fields: [userId], references: [id], map: "Feedback_company_userId_fkey")
}

// Enum for survey status
enum SurveyStatus {
  active
  finished
}
